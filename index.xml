<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>辻 大志郎</title>
    <link>https://d-tsuji.github.io/</link>
    <description>Recent content on 辻 大志郎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 12 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://d-tsuji.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoでブログを作りました</title>
      <link>https://d-tsuji.github.io/blog/start_hugo/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://d-tsuji.github.io/blog/start_hugo/</guid>
      <description>Hugoでブログを作りました ブログや技術記事は、はてなブログとか Qiita に書くことが多いですが、個人的なブログにまとめていきたいという気持ちもあり Hugo で作ってみました。作ったときの作業メモというかちょっとハマったことや Tips をまとめておきます。
 公式サイト  https://gohugo.io/ https://themes.gohugo.io/minimal/    テーマ テーマはいろいろありますが、シンプルなものがよかったので Minimal にしました。まぁ好き好きですね。
 フォント  Google Fontsから選ぶことができます。一番しっくりきたのが Segoe UI だったのでこのフォントを使うことにしました。   その他の見た目  フォントはboldにしないと少し小さい気がしたので、このあたりは main.css をいじって修正しています。あとは文字の大きさとか100%だと少し小さかったので調整したりと、細々とした修正をしました。面倒ですね。    構築手順 手順は以下を参考にすれば簡単にできました。
https://gohugo.io/getting-started/quick-start/
サイト内リンク サイト内リンクのやり方が Markdown のときと少し異なっていました。公式ドキュメントにも書いてあるのですが、以下のようにする必要があります。
https://gohugo.io/functions/ref/
- [リンク先](https://d-tsuji.github.io/blog/start_hugo/) デプロイ ページのホスティングはGitHub Pagesを使っています。以下の手順でOKです。
https://gohugo.io/hosting-and-deployment/hosting-on-github/
ポイントとしては、ブログの本文を修正するリポジトリと実際のブログのリポジトリは別になることです(そうでない設定方法もあります)。ブログ本文はprivateにして公開するブログをpublicにするということも可能です。そうしています。
GitHub Actionsとの連携 ブログ側の記事を修正/公開したときに、ブログ側の記事が自動的に反映されると嬉しいです。GitHub Actionsを使うことができます。
事前準備 以下を揃えておく必要があります。
 ブログを執筆するリポジトリ デプロイ先のリポジトリ GitHubのPersonal Access Token  repoの操作が可能な権限を付ける必要があります。 リポジトリのSettings -&amp;gt; Secretsを開き、「Add a new secret」を押して、Nameを「MY_GITHUB_ACCESS_TOKEN」Valueに先程のトークンを設定します。 この設定を入れないと、別のリポジトリにアクセスする権限を持てず、デプロイ時にエラーになります。    ここではデプロイ先のリポジトリは {USER_NAME}/{USER_NAME}.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://d-tsuji.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://d-tsuji.github.io/about/</guid>
      <description>辻大志郎 (@tutuz)  英語版  基本情報 フューチャーという会社でバックエンドエンジニアをしています。GoやJavaを扱うことが多いです。2019年にGoに惹かれて、それ以来Goを書いています。インフラはオンプレ上にvSphereで仮想化基盤を構築したり、Terraformを用いてAWS上にインフラ構築したりしています。エンジニアを支えるプロダクトやミドルウェア、ライブラリを作ることに喜びを感じます。
🌐 SNSアカウント  GitHub: https://github.com/d-tsuji Twitter: https://twitter.com/d_tutuz Qiita: https://qiita.com/tutuz Speakerdeck: https://speakerdeck.com/tutuz  🎫 OSSプロダクト   ttycopy
 他のttyプロセスのターミナルに出力された出力をコピーして表示するツール    Flower
 ワークフロー管理に用いるワークフローエンジン    💡 興味があること  コンピュータサイエンス  OS ファイルシステム 言語処理系 並行・並列プログラミング   数学  数理最適化    👏 登壇  辻大志郎, Golangで並行シミュレーテッドアニーリング, Go Conference Tokyo 2019 Autumn, 2019年10月. 辻大志郎, インライン展開をGoでのぞいてみる, golang.tokyo #28, 2019年12月.  🏆 競技プログラミング  第1回 PG BATTLE 3位入賞 AtCoder 水色(Max:1278)  👨‍💻 職歴 Future Architect (2014/10～) バックエンドエンジニア。サーバサイドはGoやJavaを扱うことが多い。インフラは主にAWS。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://d-tsuji.github.io/about_en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://d-tsuji.github.io/about_en/</guid>
      <description>Tsuji Daishiro  Japanese version  SNS Account  GitHub:d-tsuji Qiita:tutuz AtCoder(Competitive programming):tutuz Speakerdeck: https://speakerdeck.com/tutuz  Job career Future Architect(2014/10～) I am a backend engineer. I have mainly worked on the following.
 Development of data analysis platform using distributed DB Construction of IoT platform Improve performance of mission-critical systems Construction / operation of CI environment using Jenkins / Maven Realization of Infrastructure as Code using Ansible Design / operation of private cloud using vSphere  Shibuya Ward Office(2013/4～2014/09)  Tax related work  Educational background  Yokohama City University.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://d-tsuji.github.io/doc/mqtt_go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://d-tsuji.github.io/doc/mqtt_go/</guid>
      <description>MQTT Broker MQTT Brokerはmosquitoを使うことにする。Dockerで立ち上げる。
&amp;gt; docker run -it -p 1883:1883 -p 9001:9001 eclipse-mosquitto 1577610628: mosquitto version 1.6.8 starting 1577610628: Config loaded from /mosquitto/config/mosquitto.conf. 1577610628: Opening ipv4 listen socket on port 1883. 1577610628: Opening ipv6 listen socket on port 1883. MQTT Subscriberの実装 サンプル実装として go-mqtt/sample のトピックをQOS = 0でsubscribeすることにする。mqtt clientにはpahoを使うのが良さそう。ブリッジアプリとして機能するときはselectしているチャネル経由でsubscribeしたメッセージを後続に渡すのが良いだろう。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; mqtt &amp;#34;github.com/eclipse/paho.mqtt.golang&amp;#34; ) func main() { msgCh := make(chan mqtt.Message) var f mqtt.MessageHandler = func(client mqtt.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://d-tsuji.github.io/docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://d-tsuji.github.io/docs/</guid>
      <description>Docs Go  mqttをgoで試してみる  </description>
    </item>
    
  </channel>
</rss>